{"version":3,"file":"spectrum.js","sourceRoot":"","sources":["../../src/spectrum.ts"],"names":[],"mappings":"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","sourcesContent":["export { Spectrum, UIParams, Band, Zone };\n\ninterface UIParams {\n    width: number,\n    height: number,\n    background: string,      // color\n    fmBW: number,            // kHz\n    vnbDigBW: number,        // DMR kHz\n    unbDigBW: number,        // DStar kHz\n    outputColor: string,     // color\n    inputColor: string,      // color\n    outputBandColor: string, // color\n    inputBandColor: string,  // color\n};\n\n// Pixel precision for hovering over frequency.\nconst SLOP = 5;\n\ninterface Zone {\n    name: string;\n    type:\n    'fmInputBand' | 'fmOutputBand' | 'fmInput' | 'fmOutput' | 'cursor';\n    min: number,\n    max: number\n}\n\nconst typeColor: Map<string, string> = new Map();\n\ninterface Repeater {\n    id: number,\n    callsign: string,\n    input: number,\n    output: number,\n    tone: string,\n    org: string\n}\n\ninterface Band {\n    name: string,\n    extent: [number, number],\n    zones: Zone[],\n}\n\nclass Spectrum {\n    outer: HTMLDivElement;\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    info: HTMLDivElement;\n    org: HTMLDivElement;\n    freq: HTMLSpanElement;\n    chz: HTMLSpanElement;\n    cursor: number;\n    band: Band;\n    params: UIParams;\n    repeaters: Repeater[];\n\n    constructor(\n        repeaters: Repeater[],\n        band: Band,\n        params: UIParams) {\n        console.log(`Spectrum ${band.name}`);\n        this.repeaters = repeaters;\n        this.band = band;\n        this.cursor = band.extent[0];\n        this.params = params;\n\n        this.outer = document.createElement('div');\n        this.outer.className = 'spectrum';\n        this.outer.innerHTML =\n            `<div class=\"spectrum\">\n              <div class=\"info\"></div>\n              <div class=\"org\"></div>\n              <div class=\"channel\">\n                  <span class=\"freq\">${band.extent[0]}</span><span class=\"chz\">0</span>\n              </div>\n              <canvas></canvas>\n            </div>`;\n\n\n        this.canvas = this.outer.querySelector(\"canvas\") as HTMLCanvasElement;\n        this.ctx = this.canvas.getContext('2d')!;\n\n        this.info = this.outer.querySelector(\"div.info\") as HTMLDivElement;\n        this.org = this.outer.querySelector(\"div.org\") as HTMLDivElement;\n        this.freq = this.outer.querySelector('span.freq') as HTMLSpanElement;\n        this.chz = this.outer.querySelector('span.chz') as HTMLSpanElement;\n\n        this.refresh();\n        this.updateChannel(this.band.extent[0]);\n\n        this.canvas.addEventListener('mousemove', (e) => {\n            // Scale x coordinate according to browser window scaling.\n            let x = e.offsetX / this.canvas.offsetWidth * this.params.width;\n            this.updateChannel(this.freqFromX(x));\n        });\n    }\n\n    refresh() {\n        this.canvas.height = this.params.height;\n        this.canvas.width = this.params.width;\n\n        // Track changes to color pallette\n        typeColor.set('fmInputBand', this.params.inputBandColor);\n        typeColor.set('fmOutputBand', this.params.outputBandColor);\n        typeColor.set('fmInput', this.params.inputColor);\n        typeColor.set('fmOutput', this.params.outputColor);\n        typeColor.set('cursor', 'greenyellow');\n        this.draw();\n    }\n\n    draw() {\n        this.ctx.fillStyle = this.params.background;\n        this.ctx.fillRect(0, 0, this.params.width, this.params.height);\n\n        for (let zone of this.band.zones) {\n            this.drawZone(zone);\n        }\n\n        let [bandMin, bandMax] = this.band.extent;\n        for (let repeater of this.repeaters) {\n            if (repeater.output < bandMin || repeater.output > bandMax) {\n                continue;\n            }\n            // console.log(`${repeater.callsign}: ${repeater.output} ${repeater.input}`);\n            this.drawZone({\n                name: repeater.callsign,\n                min: repeater.output - this.params.fmBW / 2 / 1000,\n                max: repeater.output + this.params.fmBW / 2 / 1000,\n                type: 'fmOutput'\n            });\n            this.drawZone({\n                name: repeater.callsign,\n                min: repeater.input - this.params.fmBW / 2 / 1000,\n                max: repeater.input + this.params.fmBW / 2 / 1000,\n                type: 'fmInput'\n            });\n        }\n\n        this.drawZone({\n            name: '',\n            min: this.cursor, max: this.cursor,\n            type: 'cursor'\n        });\n    }\n\n    updateChannel(freq: number) {\n        let [r, f] = this.repeaterFromFreq(freq);\n        let displayed = f.toFixed(4);\n        this.freq.innerText = displayed.slice(0, -1);\n        this.chz.innerText = displayed.slice(-1);\n        if (r !== null) {\n            this.info.innerHTML =\n                `${r.callsign} (${r.id})` +\n                `<br><span class=\"output\">output: ${smartRound(r.output, 3, 4)}</span>` +\n                `<br><span class=\"input\">input: ${smartRound(r.input, 3, 4)}</span>` +\n                `<br><span class=\"tone\">tone: ${r.tone}</span>`;\n\n            this.org.innerHTML = `${r.org}`;\n        } else {\n            this.info.innerText = '';\n            this.org.innerText = '';\n        }\n\n        this.cursor = f;\n        this.draw();\n    }\n\n    drawZone(zone: Zone) {\n        let xMin = this.scaleX(zone.min);\n        let xMax = this.scaleX(zone.max);\n        // At least one unit of width\n        if (xMax - xMin < 1) {\n            xMin = (xMax + xMin) / 2 - 0.5;\n            xMax = xMin + 1;\n        }\n\n        if (zone.type == 'cursor') {\n            this.ctx.strokeStyle = typeColor.get(zone.type)!;\n            this.ctx.setLineDash([5, 5]);\n            this.ctx.beginPath();\n            this.ctx.moveTo((xMin + xMax)/2, 0);\n            this.ctx.lineTo((xMin + xMax)/2, this.params.height);\n            this.ctx.stroke();\n        } else {\n            this.ctx.fillStyle = typeColor.get(zone.type)!;\n            this.ctx.fillRect(xMin, 0, xMax - xMin, this.params.height);\n        }\n    }\n\n    scaleX(f: number): number {\n        let [bandMin, bandMax] = this.band.extent;\n        return this.params.width * (f - bandMin) / (bandMax - bandMin);\n    }\n\n    freqFromX(x: number): number {\n        let [bandMin, bandMax] = this.band.extent;\n        let f = bandMin + (x / this.params.width) * (bandMax - bandMin);\n        return f;\n    }\n\n    repeaterFromFreq(f: number): [Repeater | null, number] {\n        let best: Repeater | null = null;\n        let distBest: number = 1000;\n        let bestF: number = 0;\n\n        for (let repeater of this.repeaters) {\n            for (let fT of [repeater.input, repeater.output]) {\n                if (!best || Math.abs(f - fT) < distBest) {\n                    best = repeater;\n                    distBest = Math.abs(f - fT);\n                    bestF = fT;\n                    continue;\n                }\n            }\n        }\n\n        if (Math.abs(this.scaleX(f) - this.scaleX(bestF)) > SLOP) {\n            return [null, f];\n        }\n\n        return [best, bestF];\n    }\n}\n\nfunction smartRound(n: number, minDigits: number, maxDigits: number) {\n    let digits = maxDigits;\n    let result = n.toFixed(maxDigits);\n    while (digits > minDigits && result.endsWith('0')) {\n        digits--;\n        result = n.toFixed(digits);\n    }\n    return result;\n}\n"]}