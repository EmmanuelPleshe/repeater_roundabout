{"version":3,"file":"spectrum.js","sourceRoot":"","sources":["../../src/spectrum.ts"],"names":[],"mappings":"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","sourcesContent":["export { Spectrum, SpectrumOptions, UIParams };\n\ninterface SpectrumOptions {\n    band: [number, number];\n}\n\ninterface UIParams {\n    width: number,\n    height: number,\n    background: string,      // color\n    fmBW: number,            // kHz\n    vnbDigBW: number,        // DMR kHz\n    unbDigBW: number,        // DStar kHz\n    outputColor: string,     // color\n    inputColor: string,      // color\n    outputBandColor: string, // color\n    inputBandColor: string,  // color\n};\n\nconst REPEATERS = \"https://raw.githubusercontent.com/QCaudron/repeater_roundabout/main/assets/repeaters.json\";\n\nlet canvas: HTMLCanvasElement;\nlet freq: HTMLElement;\nlet chz: HTMLElement;\nlet repeaters: Repeater[];\n\nconst bandMin = 144.0;\nconst bandMax = 148.0;\n\ninterface Zone {\n  name: string;\n  type:\n    'fmInputBand' | 'fmOutputBand' |\n    'fmInput' | 'fmOutput';\n  min: number,\n  max: number\n}\n\nconst typeColor: Map<string, string> = new Map();\n\ninterface Repeater {\n  callsign: string,\n  input: number,\n  output: number\n}\n\ninterface RoundaboutRep {\n    \"Group Name\": string,\n    Callsign: string,\n    Location: string,\n    Mode: string,\n    \"Output (MHz)\": string,\n    \"Offset (MHz)\": string,\n    \"Tone (Hz)\": string,\n    Coordinates: [number, number],\n    \"Long Name\": string,\n    Website: string,\n}\n\nconst twoMeterZones: Zone[] = [\n  // {name: 'CW', min: 144.0, max: 144.1, color: 'gray'},\n  // {name: 'SSB', min: 144.1, max: 144.275, color: 'darkorange'},\n  {name: 'FM Inputs', min: 144.5, max: 144.9, type: 'fmInputBand'},\n  {name: 'FM Outputs', min: 145.1, max: 145.49, type: 'fmOutputBand'},\n  {name: 'FM Inputs', min: 146.01, max: 146.4, type: 'fmInputBand'},\n  {name: 'FM Outputs', min: 146.62, max: 147.38, type: 'fmOutputBand'},\n  {name: 'FM Inputs', min: 147.61, max: 147.99, type: 'fmInputBand'},\n  {name: 'VNBD Inputs', min: 147.40625, max: 147.50625, type: 'fmInputBand'},\n  {name: 'VNBD Outputs', min: 146.40625, max: 146.50625, type: 'fmOutputBand'},\n];\n\nclass Spectrum {\n    canvas: HTMLCanvasElement;\n    channel: HTMLDivElement;\n    ctx: CanvasRenderingContext2D;\n    freq: HTMLSpanElement;\n    chz: HTMLSpanElement;\n    options: SpectrumOptions;\n    params: UIParams;\n    repeaters: Repeater[] | undefined;\n\n    constructor(parent: HTMLElement, options: SpectrumOptions, params: UIParams) {\n        console.log(`Spectrum ${options}`);\n        this.options = options;\n        this.params = params;\n\n        parent.insertAdjacentHTML(\n            'beforeend',\n            `<div class=\"channel\">\n                <span class=\"freq\">${options.band[0]}</span><span class=\"chz\">0</span>\n            </div>\n\n            <canvas></canvas>\n            `);\n\n        this.canvas = parent.querySelector(\"canvas\") as HTMLCanvasElement;\n        this.ctx = this.canvas.getContext('2d')!;\n        this.channel = parent.querySelector(\"div.channel\")!;\n        this.freq = parent.querySelector('span.freq') as HTMLSpanElement;\n        this.chz = parent.querySelector('span.chz') as HTMLSpanElement;\n        this.init();\n    }\n\n    async init() {\n        console.log(\"Fetching data...\");\n        let response = await fetch(REPEATERS);\n        let repeatersRaw = await response.json();\n        console.log(\"Parsing data...\");\n        this.repeaters = repeatersRaw.map((r: RoundaboutRep) => {\n            let callsign = r['Callsign'];\n            let output = parseFloat(r['Output (MHz)']);\n            let offset = parseFloat(r['Offset (MHz)']);\n            let input = parseFloat((output + offset).toFixed(4));\n            return { callsign, input, output };\n        });\n\n        this.refresh();\n        this.updateChannel(this.options.band[0]);\n\n        this.canvas.addEventListener('mousemove', (e) => {\n            this.updateChannel(this.freqFromX(e.offsetX));\n        });\n    }\n\n    refresh() {\n        this.canvas.height = this.params.height;\n        this.canvas.width = this.params.width;\n        this.channel.style.width = `${this.params.width}px`;\n\n        // Track changes to color pallette\n        typeColor.set('fmInputBand', this.params.inputBandColor);\n        typeColor.set('fmOutputBand', this.params.outputBandColor);\n        typeColor.set('fmInput', this.params.inputColor);\n        typeColor.set('fmOutput', this.params.outputColor);\n\n        this.ctx.fillStyle = this.params.background;\n        this.ctx.fillRect(0, 0, this.params.width, this.params.height);\n\n        for (let zone of twoMeterZones) {\n          this.drawZone(zone);\n        }\n\n        for (let repeater of this.repeaters!) {\n          if (repeater.output < 144 || repeater.output > 148) {\n            continue;\n          }\n          // console.log(`${repeater.callsign}: ${repeater.output} ${repeater.input}`);\n          this.drawZone({\n            name: repeater.callsign,\n            min: repeater.output - this.params.fmBW/2/1000,\n            max: repeater.output + this.params.fmBW/2/1000,\n            type: 'fmOutput'\n          });\n          this.drawZone({\n            name: repeater.callsign,\n            min: repeater.input - this.params.fmBW/2/1000,\n            max: repeater.input + this.params.fmBW/2/1000,\n            type: 'fmInput'\n          });\n        }\n      }\n\n      updateChannel(freq: number) {\n            let [r, f] = repeaterFromFreq(\n                freq,\n                this.params.fmBW,\n                this.repeaters!);\n            let displayed = f.toFixed(4);\n            this.freq.innerText = displayed.slice(0, -1);\n            this.chz.innerText = displayed.slice(-1);\n            if (r !== null) {\n                console.log(r);\n            }\n        }\n\n      drawZone(zone: Zone) {\n        const xMin = this.scaleX(zone.min);\n        const xMax = this.scaleX(zone.max);\n        // console.log(`${zone.name}: ${xMin}-${xMax}`);\n        this.ctx.fillStyle = typeColor.get(zone.type)!;\n        this.ctx.fillRect(xMin, 0, xMax - xMin, this.params.height);\n      }\n\n      scaleX(f: number): number {\n        let [bandMin, bandMax] = this.options.band;\n        return this.params.width * (f - bandMin) / (bandMax - bandMin);\n      }\n\n      freqFromX(x: number): number {\n        let [bandMin, bandMax] = this.options.band;\n        let f = bandMin + (x / this.params.width) * (bandMax - bandMin);\n        return f;\n      }\n}\n\nfunction repeaterFromFreq(f: number, kHzSlop: number, repeaters: Repeater[]): [Repeater | null, number] {\n    let best: Repeater | null = null;\n    let distBest: number = 1000;\n    let bestF: number = 144.0;\n\n    for (let repeater of repeaters) {\n      for (let fT of [repeater.input, repeater.output]) {\n        if (!best || Math.abs(f - fT) < distBest) {\n          best = repeater;\n          distBest = Math.abs(f - fT);\n          bestF = fT;\n          continue;\n        }\n      }\n    }\n\n    if (distBest > kHzSlop/1000) {\n      return [null, f];\n    }\n\n    return [best, bestF];\n  }\n"]}