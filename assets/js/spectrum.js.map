{"version":3,"file":"spectrum.js","sourceRoot":"","sources":["../../src/spectrum.ts"],"names":[],"mappings":"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","sourcesContent":["export { Spectrum, UIParams, Band, Zone };\n\ninterface UIParams {\n    width: number,\n    height: number,\n    background: string,      // color\n    fmBW: number,            // kHz\n    vnbDigBW: number,        // DMR kHz\n    unbDigBW: number,        // DStar kHz\n    outputColor: string,     // color\n    inputColor: string,      // color\n    outputBandColor: string, // color\n    inputBandColor: string,  // color\n};\n\nlet canvas: HTMLCanvasElement;\nlet freq: HTMLElement;\nlet chz: HTMLElement;\nlet repeaters: Repeater[];\n\nconst bandMin = 144.0;\nconst bandMax = 148.0;\n\ninterface Zone {\n  name: string;\n  type:\n    'fmInputBand' | 'fmOutputBand' |\n    'fmInput' | 'fmOutput';\n  min: number,\n  max: number\n}\n\nconst typeColor: Map<string, string> = new Map();\n\ninterface Repeater {\n  callsign: string,\n  input: number,\n  output: number\n}\n\ninterface Band {\n    name: string,\n    extent: [number, number],\n    zones: Zone[],\n}\n\nclass Spectrum {\n    outer: HTMLDivElement;\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    freq: HTMLSpanElement;\n    chz: HTMLSpanElement;\n    band: Band;\n    params: UIParams;\n    repeaters: Repeater[] | undefined;\n\n    constructor(\n        repeaters: Repeater[],\n        band: Band,\n        parent: HTMLElement,\n        params: UIParams) {\n        console.log(`Spectrum ${band.name}`);\n        this.repeaters = repeaters;\n        this.band = band;\n        this.params = params;\n\n        parent.insertAdjacentHTML(\n            'beforeend',\n            `<div class=\"spectrum\">\n              <div class=\"channel\">\n                  <span class=\"freq\">${band.extent[0]}</span><span class=\"chz\">0</span>\n              </div>\n              <canvas></canvas>\n            </div>`);\n\n\n        this.outer = parent.lastChild as HTMLDivElement;\n        this.canvas = this.outer.querySelector(\"canvas\") as HTMLCanvasElement;\n        this.ctx = this.canvas.getContext('2d')!;\n\n        this.freq = parent.querySelector('span.freq') as HTMLSpanElement;\n        this.chz = parent.querySelector('span.chz') as HTMLSpanElement;\n        this.init();\n    }\n\n    init() {\n        this.refresh();\n        this.updateChannel(this.band.extent[0]);\n\n        this.canvas.addEventListener('mousemove', (e) => {\n            this.updateChannel(this.freqFromX(e.offsetX));\n        });\n    }\n\n    refresh() {\n        this.canvas.height = this.params.height;\n        this.canvas.width = this.params.width;\n        this.outer.style.width = `${this.params.width}px`;\n\n        // Track changes to color pallette\n        typeColor.set('fmInputBand', this.params.inputBandColor);\n        typeColor.set('fmOutputBand', this.params.outputBandColor);\n        typeColor.set('fmInput', this.params.inputColor);\n        typeColor.set('fmOutput', this.params.outputColor);\n\n        this.ctx.fillStyle = this.params.background;\n        this.ctx.fillRect(0, 0, this.params.width, this.params.height);\n\n        for (let zone of this.band.zones) {\n          this.drawZone(zone);\n        }\n\n        let [bandMin, bandMax] = this.band.extent;\n        for (let repeater of this.repeaters!) {\n          if (repeater.output < bandMin || repeater.output > bandMax) {\n            continue;\n          }\n          // console.log(`${repeater.callsign}: ${repeater.output} ${repeater.input}`);\n          this.drawZone({\n            name: repeater.callsign,\n            min: repeater.output - this.params.fmBW/2/1000,\n            max: repeater.output + this.params.fmBW/2/1000,\n            type: 'fmOutput'\n          });\n          this.drawZone({\n            name: repeater.callsign,\n            min: repeater.input - this.params.fmBW/2/1000,\n            max: repeater.input + this.params.fmBW/2/1000,\n            type: 'fmInput'\n          });\n        }\n      }\n\n      updateChannel(freq: number) {\n            let [r, f] = repeaterFromFreq(\n                freq,\n                this.params.fmBW,\n                this.repeaters!);\n            let displayed = f.toFixed(4);\n            this.freq.innerText = displayed.slice(0, -1);\n            this.chz.innerText = displayed.slice(-1);\n            if (r !== null) {\n                console.log(r);\n            }\n        }\n\n      drawZone(zone: Zone) {\n        const xMin = this.scaleX(zone.min);\n        const xMax = this.scaleX(zone.max);\n        // console.log(`${zone.name}: ${xMin}-${xMax}`);\n        this.ctx.fillStyle = typeColor.get(zone.type)!;\n        this.ctx.fillRect(xMin, 0, xMax - xMin, this.params.height);\n      }\n\n      scaleX(f: number): number {\n        let [bandMin, bandMax] = this.band.extent;\n        return this.params.width * (f - bandMin) / (bandMax - bandMin);\n      }\n\n      freqFromX(x: number): number {\n        let [bandMin, bandMax] = this.band.extent;\n        let f = bandMin + (x / this.params.width) * (bandMax - bandMin);\n        return f;\n      }\n}\n\nfunction repeaterFromFreq(f: number, kHzSlop: number, repeaters: Repeater[]): [Repeater | null, number] {\n    let best: Repeater | null = null;\n    let distBest: number = 1000;\n    let bestF: number = 0;\n\n    for (let repeater of repeaters) {\n      for (let fT of [repeater.input, repeater.output]) {\n        if (!best || Math.abs(f - fT) < distBest) {\n          best = repeater;\n          distBest = Math.abs(f - fT);\n          bestF = fT;\n          continue;\n        }\n      }\n    }\n\n    if (distBest > kHzSlop/1000) {\n      return [null, f];\n    }\n\n    return [best, bestF];\n  }\n"]}